generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addresses {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                  String                  @db.VarChar(255)
  user_id               Int                     @db.UnsignedInt
  user_type             String                  @db.VarChar(255)
  candidate_id          Int
  flat_number           String?                 @db.VarChar(255)
  building_name         String?                 @db.VarChar(255)
  building_number       String                  @db.VarChar(255)
  sub_street            String?                 @db.VarChar(255)
  street                String                  @db.VarChar(255)
  landmark              String?                 @db.VarChar(255)
  state                 String                  @db.VarChar(255)
  city                  String                  @db.VarChar(255)
  post_code             String?                 @db.VarChar(255)
  country               String                  @db.VarChar(255)
  longitude             String?                 @db.VarChar(255)
  latitude              String?                 @db.VarChar(255)
  what3words            String?                 @db.VarChar(255)
  what3words_map        String?                 @db.VarChar(255)
  agent_geo             String?                 @db.VarChar(255)
  start_date            String?                 @db.VarChar(255)
  end_date              String?                 @db.VarChar(255)
  status                String                  @default("pending") @db.VarChar(255)
  reason_for_fail       String?                 @db.VarChar(255)
  item_id               String                  @db.VarChar(255)
  item_type             String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  candidates_references candidates_references[] @ignore
  live_photos           live_photos[]
  merchants             merchants[]
  references            references[]
}

model agent_report_payments {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  uuid          String       @db.VarChar(255)
  agent_id      Int          @db.UnsignedInt
  report_id     Int          @db.UnsignedInt
  agent_bank_id Int          @db.UnsignedInt
  amount        Int          @db.UnsignedInt
  transfer_code String       @db.VarChar(255)
  currency      String       @db.VarChar(255)
  reason        String       @db.VarChar(255)
  recipient     String       @db.VarChar(255)
  paystack_id   String       @db.VarChar(255)
  created_at    DateTime?    @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
  agents_banks  agents_banks @relation(fields: [agent_bank_id], references: [id], onDelete: Cascade, map: "agent_report_payments_agent_bank_id_foreign")
  agents        agents       @relation(fields: [agent_id], references: [id], onDelete: Cascade, map: "agent_report_payments_agent_id_foreign")
  reports       reports      @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "agent_report_payments_report_id_foreign")

  @@index([agent_bank_id], map: "agent_report_payments_agent_bank_id_foreign")
  @@index([agent_id], map: "agent_report_payments_agent_id_foreign")
  @@index([report_id], map: "agent_report_payments_report_id_foreign")
}

model agent_report_reconciliation {
  id                      Int       @id @default(autoincrement()) @db.UnsignedInt
  initiated_by_user_id    Int       @db.UnsignedInt
  amount                  Float
  report_id               Int       @db.UnsignedInt
  payment_from_model_id   Int       @db.UnsignedInt
  payment_from_model_type String    @db.VarChar(255)
  payment_to_model_id     Int       @db.UnsignedInt
  payment_to_model_type   String    @db.VarChar(255)
  status                  String    @db.VarChar(255)
  group_id                String?   @db.VarChar(255)
  date_reconciled         DateTime  @default(now()) @db.Timestamp(0)
  created_at              DateTime? @db.Timestamp(0)
  updated_at              DateTime? @db.Timestamp(0)
}

model agents {
  id                          Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                        String                  @db.VarChar(255)
  user_id                     Int
  partner_id                  Int
  team_id                     Int
  username                    String                  @db.VarChar(255)
  event_id                    String                  @db.VarChar(255)
  image                       String                  @default("avatar.png") @db.VarChar(255)
  description                 String?                 @db.Text
  visibility                  Int                     @default(1) @db.TinyInt
  mobile_os                   String                  @db.VarChar(255)
  mobile_version              String                  @db.VarChar(255)
  mobile_battery              String                  @db.VarChar(255)
  status                      String                  @default("offline") @db.VarChar(255)
  latitude                    String                  @db.VarChar(255)
  longitude                   String                  @db.VarChar(255)
  is_verified                 String?                 @default("false") @db.VarChar(255)
  address_verification_amount String?                 @db.VarChar(255)
  deleted_at                  DateTime?               @db.Timestamp(0)
  created_at                  DateTime?               @db.Timestamp(0)
  updated_at                  DateTime?               @db.Timestamp(0)
  agent_report_payments       agent_report_payments[]
  agents_banks                agents_banks[]
  report_note                 report_note[]
  tokens                      tokens[]

  @@index([id], map: "agents_id_index")
  @@index([uuid], map: "agents_uuid_index")
}

model agents_banks {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  agent_id              Int                     @db.UnsignedInt
  bank_id               Int                     @db.UnsignedInt
  account_number        String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  agents                agents                  @relation(fields: [agent_id], references: [id], onDelete: Cascade, map: "agents_banks_agent_id_foreign")
  banks                 banks                   @relation(fields: [bank_id], references: [id], onDelete: Cascade, map: "agents_banks_bank_id_foreign")
  agent_report_payments agent_report_payments[]

  @@index([agent_id], map: "agents_banks_agent_id_foreign")
  @@index([bank_id], map: "agents_banks_bank_id_foreign")
}

model agents_reports {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  report_id    Int       @db.UnsignedInt
  agent_id     Int       @db.UnsignedInt
  field_id     BigInt?   @db.UnsignedBigInt
  field_type   String?   @db.VarChar(255)
  assigned_at  DateTime? @db.Timestamp(0)
  accepted_at  DateTime? @db.Timestamp(0)
  started_at   DateTime? @db.Timestamp(0)
  completed_at DateTime? @db.Timestamp(0)
  paid         Boolean   @default(false)
  amount_paid  Float     @default(300)
  task_ongoing Boolean
  status       Int       @db.UnsignedInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  reports      reports   @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "agents_reports_report_id_foreign")

  @@index([report_id], map: "agents_reports_report_id_foreign")
}

model backgrounds {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid            String    @db.VarChar(255)
  background_type String    @db.VarChar(255)
  background_id   Int
  search_id       String    @db.VarChar(255)
  user_id         String    @db.VarChar(255)
  model_id        String    @db.VarChar(255)
  model_type      String    @db.VarChar(255)
  status          String    @default("PENDING") @db.VarChar(255)
  reason_for_fail String?   @db.VarChar(255)
  deleted_at      DateTime? @db.Timestamp(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model banks {
  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  name          String         @db.VarChar(255)
  slug          String         @db.VarChar(255)
  code          String         @db.VarChar(255)
  longcode      String         @db.VarChar(255)
  gateway       String?        @db.VarChar(255)
  pay_with_bank String?        @db.VarChar(255)
  active        String?        @db.VarChar(255)
  country       String?        @db.VarChar(255)
  currency      String?        @db.VarChar(255)
  type          String?        @db.VarChar(255)
  created_at    DateTime?      @db.Timestamp(0)
  updated_at    DateTime?      @db.Timestamp(0)
  agents_banks  agents_banks[]
}

model business_partners {
  id                               Int             @id @default(autoincrement()) @db.UnsignedInt
  uuid                             String          @db.VarChar(255)
  name                             String          @db.VarChar(255)
  email                            String          @db.VarChar(255)
//  mobile                           BigInt          @db.UnsignedBigInt
mobile                           String          @db.VarChar(255)
//  phone                            BigInt?         @db.UnsignedBigInt
  phone                            String?         @db.VarChar(255)
  registration_number              String          @db.VarChar(255)
  tax_identification_number        String?         @db.VarChar(255)
  address                          String          @db.VarChar(255)
  logo                             String?         @db.VarChar(255)
  partner_id                       Int             @db.UnsignedInt
  user_id                          Int             @db.UnsignedInt
  website                          String?         @db.VarChar(255)
  support_email                    String?         @db.VarChar(255)
  wallet                           Float?
  webhook                          String?         @db.VarChar(255)
  ledger                           Float           @default(0)
  report_notification              Int?            @default(1) @db.TinyInt
  wallet_notification              Int?            @default(1) @db.TinyInt
  wallet_notification_when_balance Int?            @default(5000) @db.UnsignedInt
  api_key                          String?         @db.VarChar(255)
  deleted_at                       DateTime?       @db.Timestamp(0)
  created_at                       DateTime?       @db.Timestamp(0)
  updated_at                       DateTime?       @db.Timestamp(0)
  partners                         partners        @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "business_partners_partner_id_foreign")
  users                            users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "business_partners_user_id_foreign")
  organizations                    organizations[]

  @@index([partner_id], map: "business_partners_partner_id_foreign")
  @@index([user_id], map: "business_partners_user_id_foreign")
}

model cac_background {
  id                            Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid                          String    @db.VarChar(255)
  task_id                       String    @db.VarChar(255)
  search_type                   String?   @db.VarChar(255)
  status                        String    @db.VarChar(255)
  name_of_company               String    @db.VarChar(255)
  data                          String    @db.LongText
  registration_number           String    @db.VarChar(255)
  found_company_name            String?   @db.VarChar(255)
  date_of_change_of_name        DateTime? @db.DateTime(0)
  memorandum_of_association_url String?   @db.VarChar(255)
  additional_comments           String?   @db.VarChar(255)
  deleted_at                    DateTime? @db.Timestamp(0)
  created_at                    DateTime? @db.Timestamp(0)
  updated_at                    DateTime? @db.Timestamp(0)
}

model candidates {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                  String                  @db.VarChar(255)
  reference_id          String                  @unique(map: "candidates_reference_id_unique") @default("100000") @db.VarChar(255)
  item_id               Int
  item_value            String                  @default("user") @db.VarChar(255)
  first_name            String                  @db.VarChar(255)
  last_name             String                  @db.VarChar(255)
  middle_name           String?                 @db.VarChar(255)
  mothers_maiden_name   String?                 @db.VarChar(255)
  gender                String?                 @db.VarChar(255)
  email                 String?                 @db.VarChar(255)
  mobile                String?                 @db.VarChar(255)
  bvn                   String?                 @db.VarChar(255)
  inec                  String?                 @db.VarChar(255)
  nin                   String?                 @db.VarChar(255)
  frsc                  String?                 @db.VarChar(255)
  passport              String?                 @db.VarChar(255)
  dob                   String?                 @db.VarChar(255)
  country               String?                 @db.VarChar(255)
  previous_last_name    String?                 @db.VarChar(255)
  nationality           String?                 @db.VarChar(255)
  country_of_birth      String?                 @db.VarChar(255)
  town_of_birth         String?                 @db.VarChar(255)
  remember_token        String?                 @db.VarChar(100)
  deleted_at            DateTime?               @db.Timestamp(0)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  account_number        String?                 @db.VarChar(255)
  bank_code             String?                 @db.VarChar(255)
  full_name             String?                 @db.VarChar(255)
  bank_name             String?                 @db.VarChar(255)
  candidates_references candidates_references[] @ignore
  exams_results         exams_results[]
  identities            identities[]
  images                images[]
  live_photos           live_photos[]
  merchants             merchants[]
  payments              payments[]
  reports               reports[]
  users_candidates      users_candidates[]      @ignore
  verified_results      verified_results[]

  @@index([bvn], map: "candidates_bvn_index")
  @@index([email], map: "candidates_email_index")
  @@index([frsc], map: "candidates_frsc_index")
  @@index([id], map: "candidates_id_index")
  @@index([inec], map: "candidates_inec_index")
  @@index([mobile], map: "candidates_mobile_index")
  @@index([nin], map: "candidates_nin_index")
  @@index([reference_id], map: "candidates_reference_id_index")
  @@index([uuid], map: "candidates_uuid_index")
  @@index([first_name, middle_name, last_name], map: "first_name_middle_name_last_name")
}

model candidates_exams {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  uuid             String             @db.VarChar(255)
  candidate_id     String             @db.VarChar(255)
  candidate_name   String             @db.VarChar(255)
  exam_number      String             @db.VarChar(255)
  exam_center      String             @db.VarChar(255)
  examination      String             @db.VarChar(255)
  exam_type        String             @db.VarChar(255)
  year             String             @db.VarChar(255)
  dob              String             @db.VarChar(255)
  request_id       String             @db.VarChar(255)
  status           String             @default("NOT VERIFIED") @db.VarChar(255)
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  exams_results    exams_results[]
  verified_results verified_results[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model candidates_references {
  candidate_id Int        @db.UnsignedInt
  reference_id Int        @db.UnsignedInt
  address_id   Int        @db.UnsignedInt
  addresses    addresses  @relation(fields: [address_id], references: [id], onDelete: Cascade, map: "candidates_references_address_id_foreign")
  candidates   candidates @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "candidates_references_candidate_id_foreign")
  references   references @relation(fields: [reference_id], references: [id], onDelete: Cascade, map: "candidates_references_reference_id_foreign")

  @@index([address_id], map: "candidates_references_address_id_foreign")
  @@index([candidate_id], map: "candidates_references_candidate_id_foreign")
  @@index([reference_id], map: "candidates_references_reference_id_foreign")
  @@ignore
}

model categories {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(255)
  description   String?         @db.Text
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  category_plan category_plan[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model category_plan {
  plan_id     Int        @db.UnsignedInt
  category_id Int        @db.UnsignedInt
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "category_plan_category_id_foreign")
  plans       plans      @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "category_plan_plan_id_foreign")

  @@index([category_id], map: "category_plan_category_id_foreign")
  @@index([plan_id], map: "category_plan_plan_id_foreign")
  @@ignore
}

model documents {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid         String    @db.VarChar(255)
  report_id    Int
  package_id   Int
  user_id      Int
  candidate_id Int
  file_name    String    @db.VarChar(255)
  file_type    String    @db.VarChar(255)
  file_size    String    @db.VarChar(255)
  file_path    String    @db.Text
  side         String?   @db.VarChar(255)
  deleted_at   DateTime? @db.Timestamp(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model exams_results {
  id               Int              @id @default(autoincrement()) @db.UnsignedInt
  uuid             String           @db.VarChar(255)
  candidate_id     Int              @db.UnsignedInt
  exam_id          Int              @db.UnsignedInt
  subject_id       Int              @db.UnsignedInt
  subject          String           @db.VarChar(255)
  grade            String           @db.VarChar(255)
  created_at       DateTime?        @db.Timestamp(0)
  updated_at       DateTime?        @db.Timestamp(0)
  candidates       candidates       @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "exams_results_candidate_id_foreign")
  candidates_exams candidates_exams @relation(fields: [exam_id], references: [id], onDelete: Cascade, map: "exams_results_exam_id_foreign")

  @@index([candidate_id], map: "exams_results_candidate_id_foreign")
  @@index([exam_id], map: "exams_results_exam_id_foreign")
}

model facial_matches {
  id            Int        @id @default(autoincrement()) @db.UnsignedInt
  report_id     Int        @db.UnsignedInt
  identity_id   Int        @db.UnsignedInt
  identity_type String?    @db.VarChar(255)
  photo         String?    @db.LongText
  confidence    Float?
  threshold     Int?
  time_used     Int?
  request_id    String?    @db.VarChar(255)
  status        String?    @db.VarChar(255)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  identities    identities @relation(fields: [identity_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "facial_matches_identity_id_foreign")
  reports       reports    @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "facial_matches_report_id_foreign")

  @@index([identity_id], map: "facial_matches_identity_id_foreign")
  @@index([report_id], map: "facial_matches_report_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model field_partners {
  id                          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  uuid                        String    @db.VarChar(255)
  partner_id                  BigInt
  user_id                     BigInt?
  name                        String    @db.VarChar(255)
  address                     String?   @db.VarChar(255)
  address_verification_amount String?   @db.VarChar(255)
  mobile                      String?   @db.VarChar(255)
  api_key                     String?   @db.VarChar(255)
  ledger                      Float     @default(0)
  wallet                      Float     @default(0)
  deleted_at                  DateTime? @db.Timestamp(0)
  created_at                  DateTime? @db.Timestamp(0)
  updated_at                  DateTime? @db.Timestamp(0)
}

model field_partners_states {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id          Int       @db.UnsignedInt
  field_partner_id Int       @db.UnsignedInt
  state            String    @db.VarChar(255)
  is_active        Int       @default(1) @db.TinyInt
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "field_partners_states_user_id_foreign")

  @@index([user_id], map: "field_partners_states_user_id_foreign")
}

model id_numbers {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid         String    @db.VarChar(255)
  report_id    Int
  candidate_id Int
  type         String    @db.VarChar(255)
  value        String    @db.VarChar(255)
  state        String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model identities {
  id                            Int              @id @default(autoincrement()) @db.UnsignedInt
  uuid                          String           @db.VarChar(255)
  reference_id                  String           @db.VarChar(255)
  candidate_id                  Int              @db.UnsignedInt
  first_name                    String?          @db.VarChar(255)
  middle_name                   String?          @db.VarChar(255)
  last_name                     String?          @db.VarChar(255)
  mobile                        String?          @db.VarChar(255)
  dob                           String?          @db.VarChar(255)
  type                          String           @db.VarChar(255)
  status                        String           @default("NOT VERIFIED") @db.VarChar(255)
  batch_id                      Int?
  birth_country                 String?          @db.VarChar(255)
  birth_lga                     String?          @db.VarChar(255)
  birth_state                   String?          @db.VarChar(255)
  card_status                   String?          @db.VarChar(255)
  central_id                    String?          @db.VarChar(255)
  document_no                   String?          @db.VarChar(255)
  educational_level             String?          @db.VarChar(255)
  employment_status             String?          @db.VarChar(255)
  gender                        String?          @db.VarChar(255)
  height                        String?          @db.VarChar(255)
  maiden_name                   String?          @db.VarChar(255)
  marital_status                String?          @db.VarChar(255)
  nok_address1                  String?          @db.Text
  nok_address2                  String?          @db.Text
  nok_firstname                 String?          @db.VarChar(255)
  nok_lga                       String?          @db.VarChar(255)
  nok_state                     String?          @db.VarChar(255)
  nok_surname                   String?          @db.VarChar(255)
  nok_town                      String?          @db.VarChar(255)
  nspokenlang                   String?          @db.VarChar(255)
  ospokenlang                   String?          @db.VarChar(255)
  photo                         String?          @db.LongText
  profession                    String?          @db.VarChar(255)
  religion                      String?          @db.VarChar(255)
  residence_address_line1       String?          @db.VarChar(255)
  residence_town                String?          @db.VarChar(255)
  residence_lga                 String?          @db.VarChar(255)
  residence_state               String?          @db.VarChar(255)
  residence_status              String?          @db.VarChar(255)
  self_origin_lga               String?          @db.VarChar(255)
  self_origin_place             String?          @db.VarChar(255)
  self_origin_state             String?          @db.VarChar(255)
  signature                     String?          @db.LongText
  title                         String?          @db.VarChar(255)
  tracking_id                   String?          @db.VarChar(255)
  application_first_issued_date String?          @db.LongText
  disability                    String?          @db.VarChar(255)
  facial_mark                   String?          @db.VarChar(255)
  first_state_of_issuance       String?          @db.VarChar(255)
  glasses                       String?          @db.VarChar(255)
  license_class                 String?          @db.VarChar(255)
  license_description           String?          @db.Text
  next_of_kin_phone_number      String?          @db.VarChar(255)
  previous_dl_number            String?          @db.VarChar(255)
  issued_at                     String?          @db.VarChar(255)
  expiry_date                   DateTime?        @db.Date
  issued_date                   DateTime?        @db.Date
  created_at                    DateTime?        @db.Timestamp(0)
  updated_at                    DateTime?        @db.Timestamp(0)
  application_issued_date       String?          @db.LongText
  application_expiry_date       String?          @db.LongText
  state_of_issuance             String?          @db.VarChar(255)
  full_name                     String?          @db.VarChar(255)
  candidates                    candidates       @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "identities_candidate_id_foreign")
  facial_matches                facial_matches[]

  @@index([candidate_id], map: "identities_candidate_id_foreign")
}

model identity_status {
  id                  Int       @id @default(autoincrement()) @db.UnsignedInt
  report_id           String    @db.VarChar(255)
  identity_id         String    @db.VarChar(255)
  identity_type       String?   @db.Text
  request_first_name  String?   @db.Text
  request_last_name   String?   @db.Text
  request_dob         String?   @db.Text
  request_mobile      String?   @db.Text
  request_photo       String?   @db.MediumText
  response_first_name String?   @db.Text
  response_last_name  String?   @db.Text
  response_dob        String?   @db.Text
  response_mobile     String?   @db.Text
  response_photo      String?   @db.MediumText
  status              String?   @db.Text
  reason              String?   @db.Text
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model images {
  id              Int        @id @default(autoincrement()) @db.UnsignedInt
  uuid            String     @db.VarChar(255)
  live_photo_id   Int        @db.UnsignedInt
  candidate_id    Int        @db.UnsignedInt
  image_type      String     @db.VarChar(255)
  image_extension String     @db.VarChar(255)
  path            String     @db.VarChar(255)
  image_name      String     @db.VarChar(255)
  deleted_at      DateTime?  @db.Timestamp(0)
  created_at      DateTime?  @db.Timestamp(0)
  updated_at      DateTime?  @db.Timestamp(0)
  candidates      candidates @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "images_candidate_id_foreign")

  @@index([candidate_id], map: "images_candidate_id_foreign")
}

model incident_reports {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid            String    @db.VarChar(255)
  incident_type   String    @db.VarChar(255)
  report_id       String    @db.VarChar(255)
  additional_info String    @db.VarChar(255)
  longitude       String?   @db.VarChar(255)
  latitude        String?   @db.VarChar(255)
  altitude        String?   @db.VarChar(255)
  heading         String?   @db.VarChar(255)
  speed           String?   @db.VarChar(255)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue, reserved_at], map: "jobs_queue_reserved_at_index")
}

model live_photos {
  id              Int        @id @default(autoincrement()) @db.UnsignedInt
  uuid            String     @db.VarChar(255)
  address_id      Int        @db.UnsignedInt
  candidate_id    Int        @db.UnsignedInt
  photo_url       String?    @db.Text
  status          String     @default("NOT VERIFIED") @db.VarChar(255)
  reason_for_fail String?    @db.VarChar(255)
  deleted_at      DateTime?  @db.Timestamp(0)
  created_at      DateTime?  @db.Timestamp(0)
  updated_at      DateTime?  @db.Timestamp(0)
  addresses       addresses  @relation(fields: [address_id], references: [id], onDelete: Cascade, map: "live_photos_address_id_foreign")
  candidates      candidates @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "live_photos_candidate_id_foreign")

  @@index([address_id], map: "live_photos_address_id_foreign")
  @@index([candidate_id], map: "live_photos_candidate_id_foreign")
}

model merchants {
  id                  Int        @id @default(autoincrement()) @db.UnsignedInt
  uuid                String     @db.VarChar(255)
  address_id          Int        @db.UnsignedInt
  candidate_id        Int        @db.UnsignedInt
  status              String     @default("NOT VERIFIED") @db.VarChar(255)
  registration_number String?    @db.VarChar(255)
  name                String     @db.VarChar(255)
  email               String?    @db.VarChar(255)
  mobile              String?    @db.VarChar(255)
  telephone           String?    @db.VarChar(255)
  deleted_at          DateTime?  @db.Timestamp(0)
  created_at          DateTime?  @db.Timestamp(0)
  updated_at          DateTime?  @db.Timestamp(0)
  addresses           addresses  @relation(fields: [address_id], references: [id], onDelete: Cascade, map: "merchants_address_id_foreign")
  candidates          candidates @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "merchants_candidate_id_foreign")

  @@index([address_id], map: "merchants_address_id_foreign")
  @@index([candidate_id], map: "merchants_candidate_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model model_package {
  model_id   Int      @db.UnsignedInt
  model_type String   @default("partner") @db.VarChar(255)
  package_id Int      @db.UnsignedInt
  amount     Int      @db.UnsignedInt
  packages   packages @relation(fields: [package_id], references: [id], onDelete: Cascade, map: "model_package_package_id_foreign")

  @@index([package_id], map: "model_package_package_id_foreign")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model model_permission {
  model_id      Int         @db.UnsignedInt
  model_type    String      @db.VarChar(255)
  permission_id Int         @db.UnsignedInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "model_permission_permission_id_foreign")

  @@index([permission_id], map: "model_permission_permission_id_foreign")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model model_role {
  model_id   Int    @db.UnsignedInt
  model_type String @db.VarChar(255)
  role_id    Int    @db.UnsignedInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "model_role_role_id_foreign")

  @@index([role_id], map: "model_role_role_id_foreign")
  @@ignore
}

model model_settings {
  id                               Int       @id @default(autoincrement()) @db.UnsignedInt
  model_id                         BigInt
  model_type                       String    @db.VarChar(255)
  send_report_notification         Int       @db.TinyInt
  send_billing_notification        Int       @db.TinyInt
  cancellation_percentage_charge   Int       @db.TinyInt
  wallet_notification_when_balance Int       @db.TinyInt
  webhook                          String?   @db.VarChar(255)
  wallet                           Float     @default(0)
  ledger                           Float     @default(0)
  created_at                       DateTime? @db.Timestamp(0)
  updated_at                       DateTime? @db.Timestamp(0)
  daily_reporting                  Boolean   @default(false)
  weekly_reporting                 Boolean   @default(true)
  monthly_reporting                Boolean   @default(true)
  yearly_reporting                 Boolean   @default(true)
}

model model_user {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  model_id   Int       @db.UnsignedInt
  model_type String    @default("partner") @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "model_user_user_id_foreign")

  @@index([user_id], map: "model_user_user_id_foreign")
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    Int?
  client_id  Int
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    Int
  client_id  Int
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)
}

model oauth_clients {
  id                     Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id                Int?
  name                   String    @db.VarChar(255)
  secret                 String    @db.VarChar(100)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  client_id  Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([client_id], map: "oauth_personal_access_clients_client_id_index")
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

model organizations {
  id                               Int               @id @default(autoincrement()) @db.UnsignedInt
  uuid                             String            @db.VarChar(255)
  name                             String            @db.VarChar(255)
  email                            String            @db.VarChar(255)
  mobile                           BigInt            @db.UnsignedBigInt
  phone                            BigInt?           @db.UnsignedBigInt
  registration_number              String            @db.VarChar(255)
  tax_identification_number        String?           @db.VarChar(255)
  address                          String            @db.VarChar(255)
  logo                             String?           @db.VarChar(255)
  partner_id                       Int               @db.UnsignedInt
  user_id                          Int               @db.UnsignedInt
  business_partner_id              Int               @db.UnsignedInt
  website                          String?           @db.VarChar(255)
  support_email                    String?           @db.VarChar(255)
  wallet                           Float?
  webhook                          String?           @db.VarChar(255)
  ledger                           Float             @default(0)
  charge_from_this_account         Int               @default(1) @db.TinyInt
  report_notification              Int?              @default(1) @db.TinyInt
  wallet_notification              Int?              @default(1) @db.TinyInt
  wallet_notification_when_balance Int?              @default(5000) @db.UnsignedInt
  api_key                          String?           @db.VarChar(255)
  deleted_at                       DateTime?         @db.Timestamp(0)
  created_at                       DateTime?         @db.Timestamp(0)
  updated_at                       DateTime?         @db.Timestamp(0)
  business_partners                business_partners @relation(fields: [business_partner_id], references: [id], onDelete: Cascade, map: "organizations_business_partner_id_foreign")
  partners                         partners          @relation(fields: [partner_id], references: [id], onDelete: Cascade, map: "organizations_partner_id_foreign")
  users                            users             @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "organizations_user_id_foreign")

  @@index([business_partner_id], map: "organizations_business_partner_id_foreign")
  @@index([partner_id], map: "organizations_partner_id_foreign")
  @@index([user_id], map: "organizations_user_id_foreign")
}

model packages {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(255)
  value         String          @db.VarChar(255)
  price         Int             @db.UnsignedInt
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  model_package model_package[] @ignore
  plan_package  plan_package[]  @ignore
  user_package  user_package[]
}

model partners {
  id                               Int                 @id @default(autoincrement()) @db.UnsignedInt
  uuid                             String              @db.VarChar(255)
  user_id                          Int
  name                             String              @db.VarChar(255)
  email                            String              @db.VarChar(255)
  mobile                           String              @db.VarChar(255)
  phone                            String?             @db.VarChar(255)
  website                          String?             @db.VarChar(255)
  street                           String              @db.VarChar(255)
  city                             String              @db.VarChar(255)
  state                            String              @db.VarChar(255)
  landmark                         String              @db.VarChar(255)
  country                          String              @db.VarChar(255)
  support_email                    String?             @db.VarChar(255)
  webhook                          String?             @db.VarChar(255)
  ledger                           Float               @default(0)
  report_notification              Int                 @default(1) @db.TinyInt
  wallet_notification              Int                 @default(1) @db.TinyInt
  wallet_notification_when_balance Int                 @default(5000) @db.UnsignedInt
  wallet                           Float               @default(0)
  facebook_link                    String?             @db.Text
  twitter_link                     String?             @db.Text
  google_link                      String?             @db.Text
  left_logo                        String?             @default("avatar.png") @db.VarChar(255)
  right_logo                       String?             @default("avatar.png") @db.VarChar(255)
  api_key                          String?             @db.VarChar(255)
  fcm_key                          String?             @db.Text
  deleted_at                       DateTime?           @db.Timestamp(0)
  created_at                       DateTime?           @db.Timestamp(0)
  updated_at                       DateTime?           @db.Timestamp(0)
  business_partners                business_partners[]
  organizations                    organizations[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@index([token], map: "password_resets_token_index")
  @@ignore
}

model payments {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  uuid               String              @db.VarChar(255)
  user_id            Int                 @db.UnsignedInt
  model_id           Int                 @db.UnsignedInt
  model_type         String?             @db.VarChar(255)
  candidate_id       Int?                @db.UnsignedInt
  transaction_id     String              @db.VarChar(255)
  mobile             String?             @db.VarChar(255)
  item_id            String              @db.VarChar(255)
  item_type          String              @db.VarChar(255)
  payment_type       String              @db.VarChar(255)
  payment_mode       String              @default("online") @db.VarChar(255)
  discount           String              @default("0") @db.VarChar(255)
  amount             BigInt              @default(0)
  total_amount       BigInt              @default(0)
  card_number        String?             @db.VarChar(255)
  token              String              @db.VarChar(255)
  transaction_date   DateTime            @default(now()) @db.Timestamp(0)
  authorization_code String?             @db.VarChar(255)
  bank               String?             @db.VarChar(255)
  bin                String?             @db.VarChar(255)
  card_type          String?             @db.VarChar(255)
  channel            String?             @db.VarChar(255)
  country_code       String?             @db.VarChar(255)
  expiry_month       String?             @db.VarChar(255)
  expiry_year        String?             @db.VarChar(255)
  customer_code      String?             @db.VarChar(255)
  status             String              @default("pending") @db.VarChar(255)
  description        Int?                @db.TinyInt
  is_mobile          payments_is_mobile?
  deleted_at         DateTime?           @db.Timestamp(0)
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  candidates         candidates?         @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "payments_candidate_id_foreign")
  users              users               @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "payments_user_id_foreign")

  @@index([candidate_id], map: "payments_candidate_id_foreign")
  @@index([user_id], map: "payments_user_id_foreign")
}

model permission_user {
  permission_id Int         @db.UnsignedInt
  model_id      Int         @db.UnsignedInt
  model_type    String      @db.VarChar(255)
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permission_user_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "permission_user_model_id_model_type_index")
}

model permissions {
  id               Int                @id @default(autoincrement()) @db.UnsignedInt
  name             String             @db.VarChar(255)
  guard_name       String             @db.VarChar(255)
  created_at       DateTime?          @db.Timestamp(0)
  updated_at       DateTime?          @db.Timestamp(0)
  model_permission model_permission[] @ignore
  permission_user  permission_user[]
  role_permission  role_permission[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model plan_package {
  plan_id    Int      @db.UnsignedInt
  package_id Int      @db.UnsignedInt
  optional   Int      @db.TinyInt
  packages   packages @relation(fields: [package_id], references: [id], onDelete: Cascade, map: "plan_package_package_id_foreign")
  plans      plans    @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "plan_package_plan_id_foreign")

  @@index([package_id], map: "plan_package_package_id_foreign")
  @@index([plan_id], map: "plan_package_plan_id_foreign")
  @@ignore
}

model plans {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  price         Int             @db.UnsignedInt
  name          String          @db.VarChar(255)
  is_active     plans_is_active @default(dbgenerated("1"))
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  category_plan category_plan[] @ignore
  plan_package  plan_package[]  @ignore
  user_plan     user_plan[]
}

model references {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                  String                  @db.VarChar(255)
  address_id            Int                     @db.UnsignedInt
  first_name            String                  @db.VarChar(255)
  last_name             String                  @db.VarChar(255)
  email                 String                  @db.VarChar(255)
  mobile                String                  @db.VarChar(255)
  photo_url             String?                 @db.Text
  status                String                  @default("NOT VERIFIED") @db.VarChar(255)
  reason_for_fail       String?                 @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  addresses             addresses               @relation(fields: [address_id], references: [id], onDelete: Cascade, map: "references_address_id_foreign")
  candidates_references candidates_references[] @ignore

  @@index([address_id], map: "references_address_id_foreign")
}

model report_agent_access_denials {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  token            String?   @db.VarChar(255)
  report_id        String    @db.VarChar(255)
  description      String?   @db.VarChar(255)
  token_expires_at DateTime  @db.DateTime(0)
  new_start_date   DateTime? @db.DateTime(0)
  new_end_date     DateTime? @db.DateTime(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model report_file {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  report_id        Int       @db.UnsignedInt
  agent_id         Int       @db.UnsignedInt
  file_type        String    @db.VarChar(255)
  file_extension   String    @db.VarChar(255)
  file_name        String    @db.VarChar(255)
  file_size        String    @db.VarChar(255)
  file_path        String    @db.Text
  report_file_type String    @db.VarChar(255)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  reports          reports   @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "report_file_report_id_foreign")

  @@index([report_id], map: "report_file_report_id_foreign")
}

model report_note {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  report_id  Int       @db.UnsignedInt
  agent_id   Int       @db.UnsignedInt
  note       String    @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  agents     agents    @relation(fields: [agent_id], references: [id], onDelete: Cascade, map: "report_note_agent_id_foreign")
  reports    reports   @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "report_note_report_id_foreign")

  @@index([agent_id], map: "report_note_agent_id_foreign")
  @@index([report_id], map: "report_note_report_id_foreign")
}

model reports {
  id                        Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                      String                  @db.VarChar(255)
  reference_id              String                  @db.VarChar(255)
  user_id                   Int
  partner_id                Int                     @default(0)
  model_id                  Int
  model_type                String                  @db.VarChar(255)
  status                    String                  @default("unassigned") @db.VarChar(255)
  task_status               String                  @default("PENDING") @db.VarChar(255)
  awaiting_qa               Boolean                 @default(false)
  reason_for_failure        String?                 @db.VarChar(255)
  turnaround_time           String                  @db.VarChar(255)
  submitted_at              DateTime?               @db.Timestamp(0)
  submitted_by              String?                 @db.VarChar(255)
  completed_at              String?                 @db.Text
  package_id                String                  @db.VarChar(255)
  candidate_id              Int                     @db.UnsignedInt
  description               String?                 @db.Text
  start_time                DateTime?               @db.Date
  end_time                  DateTime?               @db.Date
  guarantor_image_id        Int?                    @db.UnsignedInt
  reportable_id             Int                     @db.UnsignedInt
  reportable_type           String                  @db.VarChar(255)
  longitude                 String?                 @db.VarChar(255)
  latitude                  String?                 @db.VarChar(255)
  altitude                  String?                 @db.VarChar(255)
  accuracy                  String?                 @db.VarChar(255)
  heading                   String?                 @db.VarChar(255)
  speed                     String?                 @db.VarChar(255)
  is_published              Int                     @default(0) @db.TinyInt
  is_flagged                Int                     @default(0) @db.TinyInt
  what3words                String?                 @db.VarChar(255)
  what3words_map            String?                 @db.VarChar(255)
  revalidate_count          Int?
  revalidate_at             DateTime?               @db.Timestamp(0)
  address_id                BigInt?                 @db.UnsignedBigInt
  rejected                  Int                     @default(0) @db.TinyInt
  rejected_at               DateTime?               @db.Timestamp(0)
  subject_consent           Boolean                 @default(true)
  deleted_at                DateTime?               @db.Timestamp(0)
  created_at                DateTime?               @db.Timestamp(0)
  updated_at                DateTime?               @db.Timestamp(0)
  report_agent_access       Int?
  rescheduled_at            DateTime?               @db.DateTime(0)
  building_type             String?                 @db.VarChar(255)
  building_color            String?                 @db.VarChar(255)
  gate_present              Boolean?
  gate_color                String?                 @db.VarChar(255)
  availability_confirmed_by String?                 @db.VarChar(255)
  closest_landmark          String?                 @db.VarChar(255)
  additional_info           String?                 @db.VarChar(255)
  incident_report_id        String?                 @db.VarChar(255)
  candidates                candidates              @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "reports_candidate_id_foreign")
  agent_report_payments     agent_report_payments[]
  agents_reports            agents_reports[]
  facial_matches            facial_matches[]
  report_file               report_file[]
  report_note               report_note[]
  users_candidates          users_candidates[]      @ignore

  @@index([candidate_id], map: "reports_candidate_id_index")
  @@index([id], map: "reports_id_index")
  @@index([reference_id], map: "reports_reference_id_index")
  @@index([uuid], map: "reports_uuid_index")
}

model role_permission {
  permission_id Int         @db.UnsignedInt
  role_id       Int         @db.UnsignedInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_permission_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_permission_role_id_foreign")
}

model role_user {
  role_id    Int    @db.UnsignedInt
  model_id   Int    @db.UnsignedInt
  model_type String @db.VarChar(255)
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_user_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "role_user_model_id_model_type_index")
}

model roles {
  id              Int               @id @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(255)
  guard_name      String            @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  model_role      model_role[]      @ignore
  role_permission role_permission[]
  role_user       role_user[]
}

model states {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  state      String    @db.VarChar(255)
  is_active  Int       @default(1) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model subjects {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid       String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model teams {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  uuid         String         @db.VarChar(255)
  user_id      Int
  partner_id   Int
  item_id      Int
  item_type    String         @db.VarChar(255)
  name         String         @db.VarChar(255)
  visibility   Int            @default(1) @db.TinyInt
  description  String?        @db.Text
  deleted_at   DateTime?      @db.Timestamp(0)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  teams_cities teams_cities[]
}

model teams_cities {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  team_id    Int       @db.UnsignedInt
  state      String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  is_active  Int       @default(1) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, map: "teams_cities_team_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "teams_cities_user_id_foreign")

  @@index([team_id], map: "teams_cities_team_id_foreign")
  @@index([user_id], map: "teams_cities_user_id_foreign")
}

model tokens {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  agent_id   Int       @db.UnsignedInt
  token      String    @db.VarChar(255)
  imei       String    @db.VarChar(255)
  device     String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  agents     agents    @relation(fields: [agent_id], references: [id], onDelete: Cascade, map: "tokens_agent_id_foreign")

  @@index([agent_id], map: "tokens_agent_id_foreign")
}

model transactions {
  id                    Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id               Int       @db.UnsignedInt
  item_id               Int       @db.UnsignedInt
  item_value            String    @db.VarChar(255)
  transaction_reference String    @db.VarChar(255)
  response_code         String    @db.VarChar(255)
  response_message      String    @db.VarChar(255)
  response_token        String    @db.VarChar(255)
  status                String    @db.VarChar(255)
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
  users                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "transactions_user_id_foreign")

  @@index([user_id], map: "transactions_user_id_foreign")
}

model uptime_statuses {
  id         Int                    @id @default(autoincrement()) @db.UnsignedInt
  service    String                 @db.VarChar(255)
  status     uptime_statuses_status
  created_at DateTime?              @db.Timestamp(0)
  updated_at DateTime?              @db.Timestamp(0)
}

model user_package {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  package_id   Int       @db.UnsignedInt
  plan_id      Int       @db.UnsignedInt
  user_plan_id Int
  status       String    @default("inactive") @db.VarChar(255)
  used_on      DateTime? @db.Timestamp(0)
  deleted_at   DateTime? @db.Timestamp(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  packages     packages  @relation(fields: [package_id], references: [id], onDelete: Cascade, map: "user_package_package_id_foreign")
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_package_user_id_foreign")

  @@index([package_id], map: "user_package_package_id_foreign")
  @@index([user_id], map: "user_package_user_id_foreign")
}

model user_plan {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  plan_id    Int       @db.UnsignedInt
  started    DateTime  @db.DateTime(0)
  expired    DateTime  @db.DateTime(0)
  status     String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  plans      plans     @relation(fields: [plan_id], references: [id], onDelete: Cascade, map: "user_plan_plan_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_plan_user_id_foreign")

  @@index([plan_id], map: "user_plan_plan_id_foreign")
  @@index([user_id], map: "user_plan_user_id_foreign")
}

model users {
  id                              Int                     @id @default(autoincrement()) @db.UnsignedInt
  uuid                            String                  @db.VarChar(255)
  bvn                             String?                 @db.VarChar(255)
  cac_number                      String?                 @db.VarChar(255)
  first_name                      String                  @db.VarChar(255)
  last_name                       String                  @db.VarChar(255)
  middle_name                     String?                 @db.VarChar(255)
  gender                          String?                 @db.VarChar(255)
  mobile                          String                  @db.VarChar(255)
  country                         String?                 @db.VarChar(255)
  dob                             String?                 @db.VarChar(255)
  email                           String                  @unique(map: "users_email_unique") @db.VarChar(255)
  password                        String                  @db.VarChar(255)
  api_key                         String?                 @db.VarChar(255)
  type                            String?                 @default("users") @db.VarChar(255)
  remember_token                  String?                 @db.VarChar(100)
  forgot_password_token           String?                 @db.VarChar(255)
  forgot_password_token_expire_at DateTime?               @db.Timestamp(0)
  login_token                     String?                 @db.VarChar(255)
  login_attempt                   Int                     @default(0)
  last_login_at                   DateTime?               @db.Timestamp(0)
  deleted_at                      DateTime?               @db.Timestamp(0)
  created_at                      DateTime?               @db.Timestamp(0)
  updated_at                      DateTime?               @db.Timestamp(0)
  business_partners               business_partners[]
  field_partners_states           field_partners_states[]
  model_user                      model_user[]
  organizations                   organizations[]
  payments                        payments[]
  teams_cities                    teams_cities[]
  transactions                    transactions[]
  user_package                    user_package[]
  user_plan                       user_plan[]
  users_passwords                 users_passwords[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model users_candidates {
  item_id      Int        @db.UnsignedInt
  candidate_id Int        @db.UnsignedInt
  item_type    String?    @db.VarChar(255)
  report_id    Int        @db.UnsignedInt
  package_id   Int        @db.UnsignedInt
  is_shared    Int        @db.TinyInt
  candidates   candidates @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "users_candidates_candidate_id_foreign")
  reports      reports    @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "users_candidates_report_id_foreign")

  @@index([candidate_id], map: "users_candidates_candidate_id_foreign")
  @@index([report_id], map: "users_candidates_report_id_foreign")
  @@ignore
}

model users_passwords {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int       @db.UnsignedInt
  password   String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "users_passwords_user_id_foreign")

  @@index([user_id], map: "users_passwords_user_id_foreign")
}

model users_tasks {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid       String    @db.VarChar(255)
  user_id    Int
  agent_id   Int
  report_id  Int
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model verified_results {
  id               Int              @id @default(autoincrement()) @db.UnsignedInt
  candidate_id     Int              @db.UnsignedInt
  exam_id          Int              @db.UnsignedInt
  subject          String           @db.VarChar(255)
  grade            String           @db.VarChar(255)
  created_at       DateTime?        @db.Timestamp(0)
  updated_at       DateTime?        @db.Timestamp(0)
  candidates       candidates       @relation(fields: [candidate_id], references: [id], onDelete: Cascade, map: "verified_results_candidate_id_foreign")
  candidates_exams candidates_exams @relation(fields: [exam_id], references: [id], onDelete: Cascade, map: "verified_results_exam_id_foreign")

  @@index([candidate_id], map: "verified_results_candidate_id_foreign")
  @@index([exam_id], map: "verified_results_exam_id_foreign")
}

model vetebra_subjects {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  subject    String    @db.VarChar(255)
  subject_id Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model vforms {
  id             Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid           String    @db.VarChar(255)
  slug           String?   @db.VarChar(255)
  name           String    @db.VarChar(255)
  price          Int
  original_image String    @db.LongText
  active_image   String    @db.LongText
  deleted_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)
}

model vforms_candidates {
  id                Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid              String    @db.VarChar(255)
  user_id           String    @db.VarChar(255)
  vform_template_id String    @default("") @db.VarChar(255)
  email             String    @db.VarChar(255)
  url               String    @db.VarChar(255)
  status            Int       @db.TinyInt
  charged           Int       @db.TinyInt
  candidate_id      Int?      @db.UnsignedInt
  deleted_at        DateTime? @db.Timestamp(0)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model vforms_packages {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid       String?   @db.VarChar(255)
  vform_id   Int
  package_id String    @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model vforms_reports {
  id                 Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid               String?   @db.VarChar(255)
  user_id            Int
  model_id           Int?
  model_type         String?   @db.VarChar(255)
  vform_template_id  String    @default("") @db.VarChar(255)
  candidate_id       Int
  vform_candidate_id String?   @db.VarChar(255)
  report_id          Int
  report_status      String    @default("") @db.VarChar(255)
  task_status        String    @default("") @db.VarChar(255)
  deleted_at         DateTime? @db.Timestamp(0)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
}

model vforms_templates {
  id               Int       @id @default(autoincrement()) @db.UnsignedInt
  uuid             String    @db.VarChar(255)
  user_id          String    @db.VarChar(255)
  model_id         Int?
  model_type       String?   @db.VarChar(255)
  vform_id         String    @default("") @db.VarChar(255)
  company_name     String    @db.VarChar(255)
  company_logo_url String    @db.VarChar(255)
  vform_title      String    @db.VarChar(255)
  vform_primary_id Int?      @db.UnsignedInt
  save             Boolean
  deleted_at       DateTime? @db.Timestamp(0)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

enum payments_is_mobile {
   false @map("0")
   true @map("1")
}

enum plans_is_active {
   false @map("0")
   true @map("1")
}

enum uptime_statuses_status {
  operational
  performance_issues
  unavailable
  under_maintainace
}
